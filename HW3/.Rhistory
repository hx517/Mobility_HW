#HW2
#problem 1
#a
busdata = read.csv("C:/Users/xihao/Desktop/busDataHW.csv") #reading in bus information data
head(busdata)
install.packages("dplyr")
library(dplyr)
df <- dplyr::filter(busdata, grepl('B54', publishlinename)) #filtering with bus name
df <- dplyr::filter(df, grepl('0', directionref)) #filtering with direction
filtered <- dplyr::filter(df, grepl('T17:|T18:00', date)) #filtering with time
head(filtered)
#b&c
install.packages("ggplot2")
install.packages("parsedate")
install.packages("reshape2")
library("ggplot2")
library("parsedate")
library("reshape2")
filtered <- filtered[with(filtered, order(filtered$date)),]#ordering the dataset by date
filtered$date <- substr(filtered$date, 1, 16)
filtered$date <- strptime(filtered$date, "%Y-%m-%dT%H:%M")
filtered
# plotting time space diagram
bus_number = substr(filtered$datedvehiclejourneyref, 40, 42)
p <- ggplot(filtered,aes(x=date, y=CallDistanceAlongRoute,colour= bus_number)) +
geom_line()+
ggtitle("Time Space Diagram of RouTe B54 during 17:00-18:00") +
labs(y="Call Distance Along Route",x="Time") +
theme(legend.position="bottom") +
theme(plot.title = element_text(hjust = 0.5))
p+annotate("rect", xmin =filtered$date[125] , xmax =filtered$date[150],
ymin =900, ymax =1300, alpha = .3) #Highlighting the bus bunching with a transparent rectangle
#Problem2
#a
bus_no <- unique(filtered$datedvehiclejourneyref) #getting the unique bus numbers from problem 1 dataset
sel_bus <- busdata[busdata$directionref == '0' & busdata$datedvehiclejourneyref %in% bus_no,] #selecting all the records of these buses from original data
sel_bus <- sel_bus[with(sel_bus, order(sel_bus$date)),]#ordering the dataset by date
sel_bus$date <- substr(sel_bus$date, 1, 16)
sel_bus$date <- strptime(sel_bus$date, "%Y-%m-%dT%H:%M") #formatting the date column
ggplot(sel_bus,aes(x=date, y=CallDistanceAlongRoute,colour=datedvehiclejourneyref)) +
geom_line()+
theme(legend.position="none") #ploting the space time diagram of these buses
# getting the average speed and time span over the journey of 0-6000 of each individual bus
speed <- list()
time_span <- list()
for (i in unique(bus_number)){
single_bus <- sel_bus[substr(sel_bus$datedvehiclejourneyref, 40, 42) == i,]
single_bus$date <- as.numeric(single_bus$date) #converting the date to numeric values with second as unit
linearMod <- lm(date~CallDistanceAlongRoute, data=single_bus) #estimating the time at 0 and 6000 by linear regression
new <- data.frame(CallDistanceAlongRoute=c(0, 6000))
result <- predict(linearMod, new)
avg_speed <- 6000/(as.numeric(result[2])-as.numeric(result[1]))
time <- as.numeric(result[2])-as.numeric(result[1])
speed <- append(speed, avg_speed)
time_span <- append(time_span, time)
}
# calculating time mean speed
time_mean_speed <- mean(as.numeric(speed)) # treating the average speed of each vehicle as spot speed
time_mean_speed
# calculating space mean speed
L <- 6000
space_mean_speed <- 6000/mean(as.numeric(time_span))
space_mean_speed
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("install.packages("tidyverse")")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("ggplot2")
#HW2
#problem 1
#a
busdata = read.csv("C:/Users/xihao/Desktop/busDataHW.csv") #reading in bus information data
head(busdata)
install.packages("dplyr")
library(dplyr)
df <- dplyr::filter(busdata, grepl('B54', publishlinename)) #filtering with bus name
df <- dplyr::filter(df, grepl('0', directionref)) #filtering with direction
filtered <- dplyr::filter(df, grepl('T17:|T18:00', date)) #filtering with time
head(filtered)
#b&c
install.packages("ggplot2")
install.packages("parsedate")
install.packages("reshape2")
library("ggplot2")
library("parsedate")
library("reshape2")
filtered <- filtered[with(filtered, order(filtered$date)),]#ordering the dataset by date
filtered$date <- substr(filtered$date, 1, 16)
filtered$date <- strptime(filtered$date, "%Y-%m-%dT%H:%M")
filtered
# plotting time space diagram
bus_number = substr(filtered$datedvehiclejourneyref, 40, 42)
p <- ggplot(filtered,aes(x=date, y=CallDistanceAlongRoute,colour= bus_number)) +
geom_line()+
ggtitle("Time Space Diagram of RouTe B54 during 17:00-18:00") +
labs(y="Call Distance Along Route",x="Time") +
theme(legend.position="bottom") +
theme(plot.title = element_text(hjust = 0.5))
p+annotate("rect", xmin =filtered$date[125] , xmax =filtered$date[150],
ymin =900, ymax =1300, alpha = .3) #Highlighting the bus bunching with a transparent rectangle
install.packages("ggplot2")
#Problem2
#a
bus_no <- unique(filtered$datedvehiclejourneyref) #getting the unique bus numbers from problem 1 dataset
sel_bus <- busdata[busdata$directionref == '0' & busdata$datedvehiclejourneyref %in% bus_no,] #selecting all the records of these buses from original data
sel_bus <- sel_bus[with(sel_bus, order(sel_bus$date)),]#ordering the dataset by date
sel_bus$date <- substr(sel_bus$date, 1, 16)
sel_bus$date <- strptime(sel_bus$date, "%Y-%m-%dT%H:%M") #formatting the date column
ggplot(sel_bus,aes(x=date, y=CallDistanceAlongRoute,colour=datedvehiclejourneyref)) +
geom_line()+
theme(legend.position="none") #ploting the space time diagram of these buses
# getting the average speed and time span over the journey of 0-6000 of each individual bus
speed <- list()
time_span <- list()
for (i in unique(bus_number)){
single_bus <- sel_bus[substr(sel_bus$datedvehiclejourneyref, 40, 42) == i,]
single_bus$date <- as.numeric(single_bus$date) #converting the date to numeric values with second as unit
linearMod <- lm(date~CallDistanceAlongRoute, data=single_bus) #estimating the time at 0 and 6000 by linear regression
new <- data.frame(CallDistanceAlongRoute=c(0, 6000))
result <- predict(linearMod, new)
avg_speed <- 6000/(as.numeric(result[2])-as.numeric(result[1]))
time <- as.numeric(result[2])-as.numeric(result[1])
speed <- append(speed, avg_speed)
time_span <- append(time_span, time)
}
# calculating time mean speed
time_mean_speed <- mean(as.numeric(speed)) # treating the average speed of each vehicle as spot speed
time_mean_speed
# calculating space mean speed
L <- 6000
space_mean_speed <- 6000/mean(as.numeric(time_span))
space_mean_speed
#Question 2
#Get current working directory
setwd('C:/Users/xihao/Documents/学习/4. Data-driven Mobility Model/HW3')
Filename <- "d04_text_station_5min_2018_02_07.txt.gz"
PeMS <- read.delim(gzfile(Filename), sep="," ,header=FALSE)
dim(PeMS)
PeMS[1,]
############################
#  Question 1: Simple plot
############################
# Selecting a loop detector station with a given ID, for instance SelectedID=404922 (lanes=3)
SelectedID <- 403430
StationData_1 <- subset(PeMS,PeMS [,2]==SelectedID)
SelectedID <- 401513
StationData_2 <- subset(PeMS,PeMS [,2]==SelectedID)
## Station 1
dev.off()
dev.new(width=8.4, height=7.0)
par(mfrow=c(2,2))
# Assume capacity is 1000 for each lane
lanes=5  # Number of lanes of the roadway at a given direction
obliqueQ <- 1000*lanes/12*(1:288)
plot(ts(StationData_1[,1]),cumsum(StationData_1[,10]),type="l",xlim=c(LowTime,UpTime),ylim=c(0,max(obliqueQ,cumsum(StationData_1[,10]))*1.5),xlab="Timestamp (Interval=5min)",ylab="Cumulative Flow N (t) (veh/5min)",main="Time vs. Flow",col="blue")
lines(1:288,obliqueQ,lwd=2,col=2)
plot(ts(StationData_1[,1]),cumsum(StationData_1[,10])-obliqueQ,type="l",xlim=c(LowTime,UpTime),ylim=c(min(cumsum(StationData_1[,10])-obliqueQ)*1.1,max(cumsum(StationData_1[,10])-obliqueQ)*1.1),xlab="Timestamp (Interval=5min)",ylab="Oblique Flow: N(t)-q*t (veh/5min)",main="Time vs. Flow",col="blue")
# Assume normal occupancy is 6%
obliqueO <- 0.06*(1:288)*100
plot(ts(StationData_1[,1]),cumsum(StationData_1[,11])*100,type="l",xlim=c(LowTime,UpTime),ylim=c(0,max(cumsum(StationData_1[,11]))*100*1.5),xlab="Timestamp (Interval=5min)",ylab="Cumulative Occupancy O(t) (%)",main="Time vs. Average Occupancy",col="blue")
lines(1:288,obliqueO,lwd=2,col=2)
plot(ts(StationData_1[,1]),cumsum(StationData_1[,11])*100-obliqueO,type="l",xlim=c(LowTime,UpTime),ylim=c(min(cumsum(StationData_1[,11])*100-obliqueO)*1.1,max(cumsum(StationData_1[,11])*100-obliqueO)*1.1),xlab="Timestamp (Interval=5min)",ylab="Oblique Occupancy: O(t)-occ*t (%)",main="Time vs. Average Occupancy",col="blue")
## Station 2
dev.off()
dev.new(width=8.4, height=7.0)
par(mfrow=c(2,2))
# Assume capacity is 1000 for each lane
lanes=5  # Number of lanes of the roadway at a given direction
obliqueQ <- 1000*lanes/12*(1:288)
plot(ts(StationData_2[,1]),cumsum(StationData_2[,10]),type="l",xlim=c(LowTime,UpTime),ylim=c(0,max(obliqueQ,cumsum(StationData_2[,10]))*1.5),xlab="Timestamp (Interval=5min)",ylab="Cumulative Flow N (t) (veh/5min)",main="Time vs. Flow",col="blue")
lines(1:288,obliqueQ,lwd=2,col=2)
plot(ts(StationData_2[,1]),cumsum(StationData_2[,10])-obliqueQ,type="l",xlim=c(LowTime,UpTime),ylim=c(min(cumsum(StationData_2[,10])-obliqueQ)*1.1,max(cumsum(StationData_2[,10])-obliqueQ)*1.1),xlab="Timestamp (Interval=5min)",ylab="Oblique Flow: N(t)-q*t (veh/5min)",main="Time vs. Flow",col="blue")
# Assume normal occupancy is 6%
obliqueO <- 0.06*(1:288)*100
plot(ts(StationData_2[,1]),cumsum(StationData_2[,11])*100,type="l",xlim=c(LowTime,UpTime),ylim=c(0,max(cumsum(StationData_2[,11]))*100*1.5),xlab="Timestamp (Interval=5min)",ylab="Cumulative Occupancy O(t) (%)",main="Time vs. Average Occupancy",col="blue")
lines(1:288,obliqueO,lwd=2,col=2)
plot(ts(StationData_2[,1]),cumsum(StationData_2[,11])*100-obliqueO,type="l",xlim=c(LowTime,UpTime),ylim=c(min(cumsum(StationData_2[,11])*100-obliqueO)*1.1,max(cumsum(StationData_2[,11])*100-obliqueO)*1.1),xlab="Timestamp (Interval=5min)",ylab="Oblique Occupancy: O(t)-occ*t (%)",main="Time vs. Average Occupancy",col="blue")
PeMS <- read.delim(gzfile(Filename), sep="," ,header=FALSE)
dim(PeMS)
PeMS[1,]
#Question 2
#Get current working directory
setwd('C:/Users/xihao/Documents/学习/4. Data-driven Mobility Model/HW3')
Filename <- "d04_text_station_5min_2018_02_07.txt.gz"
PeMS <- read.delim(gzfile(Filename), sep="," ,header=FALSE)
dim(PeMS)
PeMS[1,]
############################
#  Question 1: Simple plot
############################
# Selecting a loop detector station with a given ID, for instance SelectedID=404922 (lanes=3)
SelectedID <- 403430
StationData_1 <- subset(PeMS,PeMS [,2]==SelectedID)
SelectedID <- 401513
StationData_2 <- subset(PeMS,PeMS [,2]==SelectedID)
## Station 1
dev.off()
dev.new(width=8.4, height=7.0)
par(mfrow=c(2,2))
# Assume capacity is 1000 for each lane
lanes=5  # Number of lanes of the roadway at a given direction
obliqueQ <- 1000*lanes/12*(1:288)
plot(ts(StationData_1[,1]),cumsum(StationData_1[,10]),type="l",xlim=c(LowTime,UpTime),ylim=c(0,max(obliqueQ,cumsum(StationData_1[,10]))*1.5),xlab="Timestamp (Interval=5min)",ylab="Cumulative Flow N (t) (veh/5min)",main="Time vs. Flow",col="blue")
lines(1:288,obliqueQ,lwd=2,col=2)
plot(ts(StationData_1[,1]),cumsum(StationData_1[,10])-obliqueQ,type="l",xlim=c(LowTime,UpTime),ylim=c(min(cumsum(StationData_1[,10])-obliqueQ)*1.1,max(cumsum(StationData_1[,10])-obliqueQ)*1.1),xlab="Timestamp (Interval=5min)",ylab="Oblique Flow: N(t)-q*t (veh/5min)",main="Time vs. Flow",col="blue")
# Assume normal occupancy is 6%
obliqueO <- 0.06*(1:288)*100
plot(ts(StationData_1[,1]),cumsum(StationData_1[,11])*100,type="l",xlim=c(LowTime,UpTime),ylim=c(0,max(cumsum(StationData_1[,11]))*100*1.5),xlab="Timestamp (Interval=5min)",ylab="Cumulative Occupancy O(t) (%)",main="Time vs. Average Occupancy",col="blue")
lines(1:288,obliqueO,lwd=2,col=2)
